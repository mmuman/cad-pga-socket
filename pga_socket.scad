// Idea and draft code by max1zzz (@max234252).


/*[Variant]*/

// Which socket you need
pga_which = "128"; // ["12","64","68-10x10":68 10x10 - MC68000,"68-11x11":68 11x11 - 80C286,"84","114","128":128 - MC68030,"132","176","223","238"]

// Remove matter in the center
hollow = true;

/*[Printing]*/

// Radius margin for the pins
pin_margin = 0.1; // [0.0:0.05:0.5]

/*[Debug]*/

$fn = 16;

/*[Hidden]*/

// some references:
// https://www.precidip.com/data/files/pdf/cat14_PGA_BGA_PLCC_sockets.pdf
// https://www.peconnectors.com/sockets-pga-cpu-and-memory/

// Unicode Art!
pga_pins = [
    // [ x, y, pins, count ]
    [
        5, 5,
        [
            "01110",
            "10001",
            "10001",
            "10001",
            "01110"
        ],
        "12"
    ],
    [
        10, 10,
        [
            "1111111111",
            "1111111111",
            "11◤     11",
            "11      11",
            "11      11",
            "11      11",
            "11      11",
            "11      11",
            "1111111111",
            "1111111111"
        ],
        "64"
    ],
    [
        10, 10,
        [
            "1111111111",
            "1111111111",
            "1110000111",
            "110    011",
            "110    011",
            "110    011",
            "110◣   011",
            "1110000111",
            "1111111111",
            "1111111111"
        ],
        "68-10x10"
    ],
    [
        11, 11,
        [
            "01111111110",
            "11111111111",
            "11000000011",
            "11000000011",
            "11000000011",
            "11000000011",
            "11000000011",
            "11000000011",
            "11000000011",
            "11111111111",
            "01111111110"
        ],
        "68-11x11"
    ],
    [
        10, 10,
        [
            "1111111111",
            "1111111111",
            "1111111111",
            "1110000111",
            "1110000111",
            "1110000111",
            "1110000111",
            "1111111111",
            "1111111111",
            "1111111111"
        ],
        "84"
    ],
    [
        13, 13,
        [
            "1111111111111",
            "1111111111111",
            "1110001000111",
            "111       111",
            "111       111",
            "111       111",
            "111       111",
            "111       111",
            "111       111",
            "111◣      111",
            "1111111111111",
            "1111111111111",
            "1111111111111"
        ],
        "114"
    ],
    [
        13, 13,
        [
            "1111111111111",
            "1111111111111",
            "1111111111111",
            "1111010001111",
            "1110000000111",
            "1110000000111",
            "1110000000111",
            "1110000000111",
            "1111000001111",
            "1111010001111",
            "1111111111111",
            "1111111111111",
            "1111111111111"
        ],
        "128"
    ],
    [
        14, 14,
        [
            "11111111111111",
            "11111111111111",
            "11111111111111",
            "11100000000111",
            "11100000000111",
            "11100000000111",
            "11100000000111",
            "11100000000111",
            "11100000000111",
            "11100000000111",
            "11100000000111",
            "11111111111111",
            "11111111111111",
            "11111111111111"
        ],
        "132"
    ],
    [
        15, 15,
        [
            "111111111111111",
            "111111111111111",
            "111111111111111",
            "111111111111111",
            "1111       1111",
            "1111       1111",
            "1111       1111",
            "1111       1111",
            "1111       1111",
            "1111       1111",
            "1111◣      1111",
            "111111111111111",
            "111111111111111",
            "111111111111111",
            "111111111111111"
        ],
        "176"
    ],
    [
        18, 18,
        [
            "111111111111111111",
            "111111111111111111",
            "111111111111111111",
            "111111111111111111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111100000000001111",
            "111111111111111111",
            "111111111111111111",
            "111111111111111111",
            "011111111111111111"
        ],
        "223"
    ],
    [
        19, 19,
        [
            "1111111111111111111",
            "1111111111111111111",
            "1111111111111111111",
            "1111111111111111111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111000000000001111",
            "1111100000000001111",
            "1111111111111111111",
            "1111111111111111111",
            "0111111111111111111",
            "0011111111111111111"
        ],
        "238"
    ]
];

module pga_socket(pga, margin=0.0) {
    pitch=2.54;

    module pin_array(pga, o = 0, cavity=false) {
        fn = cavity ? ($preview ? 8 : $fn) : 4;
        for(y=[0:1:pga.y-1],x=[0:1:pga.x-1]){
            if (pga.z[pga.y-y-1][x] == "1") {
                translate([pitch*(x+.5), pitch*(y+.5), 0]){
                    translate([0, 0, -.1])
                        cylinder(2.2+.2, 0.7 + o, 0.7 + o, $fn=fn);
                    translate([0, 0, 2.2])
                        cylinder(0.9, 0.9 + o, 0.9 + o, $fn=fn);
                    // speed up rendering, that's just for the preview
                    if (!cavity) {
                        translate([0, 0, -3])
                            cylinder(4, 0.2, 0.2);
                        translate([0, 0, 3])
                            difference() {
                                cylinder(0.5, 0.9, 0.9);
                                translate([0,0,.1]) cylinder(1, 0.6, 0.6);
                            }
                    }
                }
            }
            // arrange for holes in the middle
            if (cavity && hollow) {
                corners = " ◢◣◤◥";
                // TODO: rounded corners? ◜◝◞◟
                for (i = [0:4]) {
                    if (pga.z[pga.y-y-1][x] == corners[i]) {
                        translate([pitch*(x+.5), pitch*(y+.5), 0])
                            difference() {
                                cube([pitch+0.05, pitch+0.05, 10], center=true);
                                if (i > 0)
                                    rotate([0, 0, (0.5 - i) * 90]) translate([5, 0, 5]) cube(10, center=true);
                            }
                    }
                }
            }
        }
    }

    if ($preview)
        color("Goldenrod") pin_array(pga, 0);

    difference() {
        cube([pitch*pga.x, pitch*pga.y, 3]);
        pin_array(pga, margin, true);
    }
};

idx = search([pga_which], pga_pins, num_returns_per_match=0, index_col_num=3);

pga_socket(pga_pins[idx[0][0]], pin_margin);
